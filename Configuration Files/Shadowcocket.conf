# name = ShanQ的小火箭
# raw-url = https://raw.githubusercontent.com/SHanQ7/Script-ShanQ/main/Configuration%20Files/Shadowcocket.conf



#=====================================#
# 建议在「设置 -> GeoLite2 -> 国家」填写使用下面链接
# https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb
# https://raw.githubusercontent.com/Hackl0us/GeoIP2-CN/release/Country.mmdb

# 建议在「设置 -> GeoLite2 -> ASN」填写使用下面链接
# https://raw.githubusercontent.com/Hackl0us/GeoIP2-CN/release/Country.mmdb
# https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb
# https://raw.githubusercontent.com/P3TERX/GeoLite.mmdb/download/GeoLite2-ASN.mmdb
# https://raw.githubusercontent.com/Masaiki/GeoIP2-CN/release/Country.mmdb



#==============UserScript==============#
# IPv6 支持（默认关闭，开启 true| 关闭 false）
ipv6 = false
# 首选IPv6。优先向IPv6的DNS服务器查询AAAA记录，优先使用AAAA记录。false表示不启用。
prefer-ipv6 = false
# 旁路隧道
bypass-system = true
# 私有IP应答。如果不启用该选项，域名解析返回私有IP，Shadowrocket会认为该域名被劫持而强制使用代理。
private-ip-answer = true
# 直连域名解析失败后使用代理。false表示不启用
dns-direct-fallback-proxy = false
# 跳过代理
skip-proxy = 192.168.0.0/16,193.168.0.0/16,10.0.0.0/8,172.16.0.0/12,127.0.0.1,100.64.0.0/10,17.0.0.0/8,localhost,*.local,e.crashlynatics.com,*.crashlytics.com,www.baidu.com,yunbusiness.ccb.com,passenger.t3go.cn,iosapps.itunes.apple.com
# TUN旁路路由
tun-excluded-routes = 10.0.0.0/8,100.64.0.0/10,127.0.0.0/8,169.254.0.0/16,172.16.0.0/12,192.0.0.0/24,192.0.2.0/24,192.88.99.0/24,192.168.0.0/16,198.18.0.0/15,198.51.100.0/24,203.0.113.0/24,224.0.0.0/4,255.255.255.255/32,239.255.255.250/32,239.255.255.250/32
# DNS 服务器
dns-server = https://doh.pub/dns-query,https://dns.alidns.com/dns-query,system,223.5.5.5,119.29.29.29,114.114.114.114,202.141.176.93,202.141.178.13,117.50.10.10,119.28.28.28,8.8.8.8,8.8.4.4,1.0.0.1
# 备用DNS。当覆写DNS解析失败后回退备用DNS，如需指定多个DNS，可用逗号分隔。system表示回退到系统DNS。
fallback-dns-server = system
# DNS劫持。有些设备或软件总是使用硬编码的DNS服务器，例如Netflix通过Google DNS(8.8.8.8或8.8.4.4)发送请求，您可以使用此选项来劫持查询。
hijack-dns = 8.8.8.8:53,8.8.4.4:53
# 解决一些ip请求无法匹配域名类规则的问题。always-real-ip指定的域名将不返回fake ip响应，直接将dns请求发往目标dns服务器
always-real-ip = *.iCloud.com, *.apple.com, *.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me, *.pingan.com.cn, *.cmbchina.com, msftconnecttest.com, msftncsi.com, *.msftconnecttest.com, *.msftncsi.com, *.srv.nintendo.net, *.stun.playstation.net, xbox.*.microsoft.com, *.xboxlive.com, *.battlenet.com.cn, *.battlenet.com, *.blzstatic.cn, *.battle.net



#======================================#
[Proxy]
# 本地节点



#======================================#
[Proxy Group]
# 代理分组
# select:手动选择节点。
# url-test:自动选择延迟最低节点。
# fallback:节点挂掉时自动切换其他可用节点。
# load-balance:不同规则的请求使用分组里的不同节点进行连接。
# random:随机使用分组里的不同节点进行连接。

🚀 全部节点 = select,policy-regex-filter=^((?!(网易|网易云|网易云音乐|音乐|云音乐|官网|流量|加群|订阅|获取|刷新|鸡场|机场|订购|购买|套餐|重置|分享|网址|邀请|公众号|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$,select=0
🏰 策略选择 = select,⚡ 延迟最低,🚀 全部节点,❇️ 直连模式,🔮 负载均衡,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,select=0
📺 Emby = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,❇️ 直连模式,select=0
🐈‍⬛Github = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
💻 Google = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🎙️ Spotify = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🕊️ Twitter = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🎥 Netflix = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🎬 Disney+ = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🖥️ YouTube = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🤖 ChatGPT = select,🇺🇲 美国节点,🚀 全部节点,🏰 策略选择,select=0
✈️ Telegram = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
📽️ Instagram = select,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🏰 策略选择,🚀 全部节点,select=0
🎧 网易云节点 = select,policy-regex-filter=(?i)(网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|music|🎵|🎶|🎧),select=0
🍏 苹果服务 = select,❇️ 直连模式,🏰 策略选择,select=0
🛫 国际代理 = select,🏰 策略选择,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🚀 全部节点,select=0
🌏 全球加速 = select,🏰 策略选择,❇️ 直连模式,🇭🇰 香港节点,🇨🇳 台湾节点,🇯🇵 日本节点,🇰🇷 韩国节点,🇸🇬 狮城节点,🇺🇲 美国节点,🚀 全部节点,select=0
⚡️ 延迟最低 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=^((?!(网易|网易云|网易云音乐|音乐|云音乐|官网|流量|加群|订阅|获取|刷新|鸡场|机场|订购|购买|套餐|重置|分享|网址|邀请|公众号|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
❇️ 直连模式 = select,DIRECT,🏰 策略选择,select=0
🚫 拦截模式 = select,REJECT,DIRECT,select=0
🇭🇰 香港节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇭🇰|香|港|香港|香江|香岛|湾仔|港仔|九龙|铜锣湾|旺角|HK|Hong|HongKong))^((?!(台|日|韩|新|美|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
🇨🇳 台湾节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇨🇳|台|台湾|台北|新北|桃园|台中|台南|高雄|基隆|新竹|嘉义|苗栗|彰化|南投|云林|屏东|台东|花莲|宜兰|澎湖|金门|连江|TW|Taiwan))^((?!(港|日|韩|新|美|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
🇯🇵 日本节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇯🇵|日|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan|名古屋|福冈|仙台|京都|Japan))^((?!(港|台|韩|新|美|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
🇰🇷 韩国节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇰🇷|韩|韩国|南韩|南朝鲜|高丽|大韩民国|首尔|世宗|济州市|水原|釜山|大邱|仁川|光州|大田|蔚山|KR|Korea|Korean|South Korea))^((?!(港|台|日|新|美|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
🇸🇬 狮城节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇸🇬|新|狮|獅|坡|新加坡|星|星加坡|星洲|狮城|SG|Singapore))^((?!(港|台|日|韩|美|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$
🇺🇲 美国节点 = url-test,url=http://www.gstatic.com/generate_204,interval=600,tolerance=100,timeout=3,select=0,policy-regex-filter=(?=.*((?i)🇺🇸|美|美国|美利坚合众国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|华盛顿|内华达|蒙大纳|怀俄明州|菲尼克斯|阿尔伯克基|丹佛|US|United States|States|American))^((?!(港|台|日|韩|新|英|平|邀|群|刷新|网|网易|网易云|网易云音乐|音乐|云音乐|Netease|Music|𝐌𝐮𝐬𝐢𝐜|Unbolck|Update|music|🎵|🎶|🎧)).)*$



#======================================#
[Rule]
# 规则类型：
# DOMAIN-SUFFIX：匹配请求域名的后缀。如“DOMAIN-SUFFIX,example.com,DIRECT”可以匹配到“a.example.com、a.b.example.com”。
# DOMAIN-KEYWORD：匹配请求域名的关键词。如“DOMAIN-KEYWORD,exa,DIRECT”可以匹配到“a.example.com、a.b.example.com”。
# DOMAIN：匹配请求的完整域名。如“DOMAIN,www.example.com,DIRECT”只能匹配到“www.example.com”。
# USER-AGENT：匹配用户代理字符串，支持使用通配符“*”。如“USER-AGENT,MicroMessenger*,DIRECT”可以匹配到“MicroMessenger Client”。
# URL-REGEX：匹配URL正则式。如“URL-REGEX,^https?://.+/item.+,REJECT”可以匹配到“https://www.example.com/item/abc/123”。
# IP-CIDR：匹配IPv4或IPv6地址。如“IP-CIDR,192.168.1.0/24,DIRECT”可以匹配到IP段“192.168.1.1～192.168.1.254”。当域名请求遇到IP类规则时，Shadowrocket会向本地DNS服务器发送查询请求，以判断主机IP是否匹配规则。若IP类规则加“no-resolve”(如：IP-CIDR,172.16.0.0/12,DIRECT,no-resolve)，则域名请求将会跳过此规则，不会触发本地DNS查询。
# IP-ASN：匹配IP地址隶属的ASN编号。如“IP-ASN,56040,DIRECT”可以匹配到微信的相关IP请求。
# RULE-SET：匹配规则集内容。规则集的组成部分需包含规则类型。
# DOMAIN-SET：匹配域名集内容。域名集的组成部分不包含规则类型。
# SCRIPT：匹配脚本名称。
# DST-PORT：匹配目标主机名的端口号。如“DST-PORT,443,DIRECT”可以匹配到443目标端口。
# GEOIP：匹配IP数据库。如“GEOIP,CN,DIRECT”可以匹配到归属地为CN的IP地址。
# FINAL：兜底策略。如“FINAL,PROXY”表示当其他所有规则都匹配不到时才使用FINAL规则的策略。
# AND：逻辑规则，与规则。如“AND,((DOMAIN,www.example.com),(DST-PORT,123)),DIRECT”可以匹配到“www.example.com:123”。
# NOT：逻辑规则，非规则。如“NOT,((DST-PORT,123)),DIRECT”可以匹配到除了“123”端口的其他所有请求。
# OR：逻辑规则，或规则。如“OR,((DST-PORT,123),(DST-PORT,456)),DIRECT”可以匹配到“123”或“456”端口的所有请求。

# 规则策略：
# PROXY：代理。通过首页正在使用的代理服务器转发流量。
# DIRECT：直连。连接不经过任何代理服务器。
# REJECT：拒绝。返回HTTP状态码404，没有内容。
# REJECT-DICT：拒绝。返回HTTP状态码200，内容为空的JSON对象。
# REJECT-ARRAY：拒绝。返回HTTP状态码200，内容为空的JSON数组。
# REJECT-200：拒绝。返回HTTP状态码200，没有内容。
# REJECT-IMG：拒绝。返回HTTP状态码200，内容为1像素GIF。
# REJECT-TINYGIF：拒绝。返回HTTP状态码200，内容为1像素GIF。
# REJECT-DROP：拒绝。丢弃IP包。
# REJECT-NO-DROP：拒绝。返回ICMP端口不可达。
# 除此之外，规则策略还可以选择「代理分组」、「订阅名称」、「分组」、「节点」。
#======================================#
# 规则匹配的优先级：
# 1.规则从上到下依次匹配。
# 2.域名规则优先于IP规则。
#======================================#
# 辅助功能，按需使用！
# 网站显示IP归属地
#RULE-SET,https://raw.githubusercontent.com/lwd-temp/anti-ip-attribution/main/generated/surge.list,PROXY
# Speedtest测速
#RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Speedtest/Speedtest.list,PROXY
#======================================#



#======================================#
# 以下是增强去广告，大量使用规则会引起误杀，请按需使用！
# Advertising 与 Advertising_Domain 同时启用
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Advertising/Advertising.list,🚫 拦截模式
# Advertising_Domain
DOMAIN-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Advertising/Advertising_Domain.list,🚫 拦截模式



#======================================#
# 运营劫持
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Hijacking/Hijacking.list,🚫 拦截模式
# 隐私保护
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Privacy/Privacy_Domain.list,🚫 拦截模式
# Emby
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Emby/Emby.list,📺 EMBY
DOMAIN-KEYWORD,emby,📺 EMBY
# Github
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/GitHub/GitHub.list,🐈‍⬛ GITHUB
DOMAIN-KEYWORD,github,🐈‍⬛ GITHUB
# YouTube
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/YouTube/YouTube.list,🖥️ YOUTUBE
# YouTubeMusic
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/YouTubeMusic/YouTubeMusic.list,🖥️ YOUTUBE
DOMAIN-KEYWORD,youtube,🖥️ YOUTUBE
# Google谷歌
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Google/Google.list,💻 GOOGLE
DOMAIN-KEYWORD,google,💻 GOOGLE
# Spotify
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Spotify/Spotify.list,🎙️ SPOTIFY
DOMAIN-KEYWORD,spotify,🎙️ SPOTIFY
# Twitter
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Twitter/Twitter.list,🕊️ TWITTER
DOMAIN-KEYWORD,twitter,🕊️ TWITTER
# Netflix
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Netflix/Netflix.list,🎥 NETFLIX
DOMAIN-KEYWORD,netflix,🎥 NETFLIX
# Disney
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Disney/Disney.list,🎬 DISNEY+
DOMAIN-KEYWORD,disney,🎬 DISNEY+
# Telegram
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Telegram/Telegram.list,✈️ TELEGRAM
DOMAIN-KEYWORD,telegram,✈️ TELEGRAM
# Instagram
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Instagram/Instagram.list,📽️ INSTAGRAM
DOMAIN-KEYWORD,instagram,📽️ INSTAGRAM
# 局域网地址
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Lan/Lan.list,❇️ 直连模式
# China域名
RULE-SET,https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list,❇️ 直连模式
# 全球加速
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Global/Global.list,🌏 全球加速
# 全球加速
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Global/Global_Domain.list,🌏 全球加速
# GeoIP China，直连
GEOIP,CN,❇️ 直连模式
# Final，不在上述规则中(远程以及本地)的剩余请求，将走Final 指定的节点/策略，这里即是 → 全球加速, 请根据自己的需求来选择直连或节点、策略
FINAL,🌏 全球加速



#======================================#
[Host]
# 域名指定本地值：
# example.com=1.2.3.4
# 域名指定DNS服务器：
# example.com=server:1.2.3.4
# wifi名称指定DNS服务器，如需指定多个DNS，可用逗号分隔：
# ssid:wifi名称=server:1.2.3.4
#localhost = 127.0.0.1



#======================================#
[URL Rewrite]
# Google搜索引擎防跳转的重写
^https?://(www.)?g.cn https://www.google.com 302
^https?://(www.)?google.cn https://www.google.com 302


#======================================#
[Script]
# 本地脚本




#======================================#
[MITM]
enable = true
# 添加主机名
hostname = www.google.*



#======================================#
# ca-passphrase和ca-p12代为证书&主机名部分，可去配置里的「HTTP解密 -> 证书 -> 生成新的CA证书」里自行生成并安装证书，会在此生成对应信息，也可在更新配置前可把旧的配置中passphrase和p12代码拷贝下来, 导入新的配置文件把内容粘贴在对应位置就不用重装证书。
ca-passphrase = 
ca-p12 = 
